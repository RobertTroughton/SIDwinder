// ==================================
//             SIDwinder
//
//  Raistlin / Genesis Project (G*P)
// ==================================
#include "DisassemblyWriter.h"
#include "SIDLoader.h"
#include "cpu6510.h"

#include <algorithm>
#include <iostream>
#include <queue>
#include <set>
#include <functional>

namespace sidwinder {

    /**
     * @brief Constructor for DisassemblyWriter
     *
     * Initializes the disassembly writer with references to the CPU, SID loader,
     * memory analyzer, label generator, and code formatter.
     *
     * @param cpu Reference to the CPU
     * @param sid Reference to the SID loader
     * @param analyzer Reference to the memory analyzer
     * @param labelGenerator Reference to the label generator
     * @param formatter Reference to the code formatter
     */
    DisassemblyWriter::DisassemblyWriter(
        const CPU6510& cpu,
        const SIDLoader& sid,
        const MemoryAnalyzer& analyzer,
        const LabelGenerator& labelGenerator,
        const CodeFormatter& formatter)
        : cpu_(cpu),
        sid_(sid),
        analyzer_(analyzer),
        labelGenerator_(labelGenerator),
        formatter_(formatter) {
        pointerDetector_ = std::make_unique<PointerBasedSelfModificationDetector>();
    }

    /**
     * @brief Generate an assembly file
     *
     * Creates a complete assembly language file for the disassembled SID,
     * including header comments, constants, and code.
     *
     * @param filename Output filename
     * @param sidLoad New SID load address
     * @param sidInit New SID init address
     * @param sidPlay New SID play address
     */
    void DisassemblyWriter::generateAsmFile(
        const std::string& filename,
        u16 sidLoad,
        u16 sidInit,
        u16 sidPlay,
        bool removeCIAWrites) {

        util::Logger::info("Generating assembly file: " + filename);

        // Open the output file
        std::ofstream file(filename);
        if (!file) {
            util::Logger::error("Failed to open output file: " + filename);
            return;
        }

        // Write file header
        file << "//; ------------------------------------------\n";
        file << "//; Generated by " << SIDwinder_VERSION << "\n";
        file << "//; \n";
        file << "//; Name: " << sid_.getHeader().name << "\n";
        file << "//; Author: " << sid_.getHeader().author << "\n";
        file << "//; Copyright: " << sid_.getHeader().copyright << "\n";
        file << "//; ------------------------------------------\n\n";

        // Output addresses as constants
        file << ".const SIDLoad = $" << util::wordToHex(sidLoad) << "\n";

        // Output hardware registers as constants
        outputHardwareConstants(file);

        // Output zero page defines
        emitZPDefines(file);

        // Disassemble to file
        disassembleToFile(file, removeCIAWrites);

        file.close();
    }

    /**
     * @brief Add an indirect memory access
     *
     * Records information about an indirect memory access for later analysis.
     * Enhanced to collect more detailed information about pointer usage.
     *
     * @param pc Program counter
     * @param zpAddr Zero page address
     * @param targetAddr Target address
     */
    void DisassemblyWriter::addIndirectAccess(u16 pc, u8 zpAddr, u16 targetAddr) {
        // Get the sources of the ZP variables
        const auto& lowSource = cpu_.getWriteSourceInfo(zpAddr);
        const auto& highSource = cpu_.getWriteSourceInfo(zpAddr + 1);

        // Get the last instructions that wrote to these ZP addresses
        u16 lastWriteLow = cpu_.getLastWriteTo(zpAddr);
        u16 lastWriteHigh = cpu_.getLastWriteTo(zpAddr + 1);

        // Look for an existing record for this ZP address
        IndirectAccessInfo* existingInfo = nullptr;
        for (auto& existing : indirectAccesses_) {
            if (existing.zpAddr == zpAddr &&
                existing.sourceLowAddress == lowSource.address &&
                existing.sourceHighAddress == highSource.address) {
                existingInfo = &existing;
                break;
            }
        }

        // If not found, create a new entry
        if (!existingInfo) {
            IndirectAccessInfo info;
            info.instructionAddress = pc;
            info.zpAddr = zpAddr;
            info.lastWriteLow = lastWriteLow;
            info.lastWriteHigh = lastWriteHigh;

            // Capture source addresses when available
            if (lowSource.type == RegisterSourceInfo::SourceType::Memory) {
                info.sourceLowAddress = lowSource.address;
            }

            if (highSource.type == RegisterSourceInfo::SourceType::Memory) {
                info.sourceHighAddress = highSource.address;
            }

            // Add this target address
            info.targetAddresses.push_back(targetAddr);

            // Add to the collection
            indirectAccesses_.push_back(info);
        }
        else {
            // Add this target address to the existing entry if not already present
            if (std::find(existingInfo->targetAddresses.begin(),
                existingInfo->targetAddresses.end(),
                targetAddr) == existingInfo->targetAddresses.end()) {
                existingInfo->targetAddresses.push_back(targetAddr);
            }
        }
    }

    /**
     * @brief Process all recorded indirect accesses
     *
     * Analyzes indirect access patterns to identify address references
     * and pointer tables. Updated to use the new RelocationTable approach.
     */
    void DisassemblyWriter::processIndirectAccesses() {
        if (indirectAccesses_.empty() && selfModifyingPatterns_.empty()) {
            return;
        }

        // Get memory data flow from CPU
        const auto& dataFlow = cpu_.getMemoryDataFlow();

        // Clear any existing entries in relocTable_
        relocTable_.clear();

        // Process indirect accesses (existing code)
        for (const auto& access : indirectAccesses_) {
            if (!access.targetAddresses.empty()) {
                u16 targetAddr = access.targetAddresses[0];

                if (access.sourceLowAddress != 0) {
                    relocTable_.addEntry(access.sourceLowAddress, targetAddr, RelocationEntry::Type::Low);
                    const_cast<LabelGenerator&>(labelGenerator_).addPendingSubdivisionAddress(access.sourceLowAddress);
                    processRelocationChain(dataFlow, relocTable_, access.sourceLowAddress, targetAddr, RelocationEntry::Type::Low);
                }

                if (access.sourceHighAddress != 0) {
                    relocTable_.addEntry(access.sourceHighAddress, targetAddr, RelocationEntry::Type::High);
                    const_cast<LabelGenerator&>(labelGenerator_).addPendingSubdivisionAddress(access.sourceHighAddress);
                    processRelocationChain(dataFlow, relocTable_, access.sourceHighAddress, targetAddr, RelocationEntry::Type::High);
                }
            }
        }

        // Process self-modifying code patterns
        for (const auto& [instrAddr, patterns] : selfModifyingPatterns_) {
            for (const auto& pattern : patterns) {
                if (pattern.hasLowByte && pattern.hasHighByte) {
                    // We have a complete address
                    u16 targetAddr = pattern.lowByte | (pattern.highByte << 8);

                    // Add relocation entries
                    if (pattern.lowByteSource != 0) {
                        relocTable_.addEntry(pattern.lowByteSource, targetAddr, RelocationEntry::Type::Low);
                        const_cast<LabelGenerator&>(labelGenerator_).addPendingSubdivisionAddress(pattern.lowByteSource);
                        processRelocationChain(dataFlow, relocTable_, pattern.lowByteSource, targetAddr, RelocationEntry::Type::Low);
                    }

                    if (pattern.highByteSource != 0) {
                        relocTable_.addEntry(pattern.highByteSource, targetAddr, RelocationEntry::Type::High);
                        const_cast<LabelGenerator&>(labelGenerator_).addPendingSubdivisionAddress(pattern.highByteSource);
                        processRelocationChain(dataFlow, relocTable_, pattern.highByteSource, targetAddr, RelocationEntry::Type::High);
                    }
                }
            }
        }
    }

    void DisassemblyWriter::onMemoryFlow(u16 pc, char reg, u16 sourceAddr, u8 value, bool isIndexed) {

        // Store the source information for this register
        registerSources_[reg] = { sourceAddr, value, isIndexed };
        const_cast<LabelGenerator&>(labelGenerator_).addPendingSubdivisionAddress(sourceAddr);
    }

    void DisassemblyWriter::onComparison(u16 pc, char reg, u8 compareValue, u16 sourceAddr, bool isMemorySource) {
        if (pointerDetector_) {
            ComparisonRecord record;
            record.pc = pc;
            record.reg = reg;
            record.compareValue = compareValue;
            record.sourceAddr = sourceAddr;
            record.isMemorySource = isMemorySource;
            record.nextPC = pc + 2; // Most comparisons are 2 bytes, adjust as needed

            pointerDetector_->recordComparison(record);
        }
    }

    void DisassemblyWriter::processRelocationChain(
        const MemoryDataFlow& dataFlow,
        RelocationTable& relocTable,
        u16 addr,
        u16 targetAddr,
        RelocationEntry::Type relocType) {

        // Add entry with the EXACT target address as received - no adjustments
        relocTable.addEntry(addr, targetAddr, relocType);

        // Mark this source address for potential subdivision
        const_cast<LabelGenerator&>(labelGenerator_).addPendingSubdivisionAddress(addr);

        // Find any other memory locations that write to this address
        auto it = dataFlow.memoryWriteSources.find(addr);
        if (it != dataFlow.memoryWriteSources.end()) {
            // Process each source address that writes to this address
            for (u16 newAddr : it->second) {
                // Skip self-references to avoid infinite recursion
                if (newAddr != addr) {
                    // Use SAME target address for all chain entries to ensure consistency
                    processRelocationChain(dataFlow, relocTable, newAddr, targetAddr, relocType);
                }
            }
        }
    }

    /**
     * @brief Output hardware constants to the assembly file
     *
     * Identifies hardware components (like SID chips) that are accessed
     * in the code and generates appropriate constant definitions.
     *
     * @param file Output stream
     */
    void DisassemblyWriter::outputHardwareConstants(std::ofstream& file) {
        // Find all accessed hardware components

        // SID detection
        std::set<u16> sidBases;
        for (u16 addr = 0xD400; addr <= 0xD7FF; addr++) {
            if (analyzer_.getMemoryType(addr) & (MemoryType::Accessed)) {
                u16 base = addr & 0xFFE0; // Align to 32 bytes for SID
                sidBases.insert(base);
            }
        }

        // Ensure at least one SID is always present
        if (sidBases.empty()) {
            sidBases.insert(0xD400);
        }

        // Register SID bases
        int sidIndex = 0;
        for (u16 base : sidBases) {
            const std::string name = "SID" + std::to_string(sidIndex);

            // Register with label generator
            const_cast<LabelGenerator&>(labelGenerator_).addHardwareBase(
                HardwareType::SID, base, sidIndex, name);

            // Output to assembly file
            file << ".const " << name << " = $" << util::wordToHex(base) << "\n";

            sidIndex++;
        }

        // Future hardware component detection can be added here:
        // VIC-II detection (0xD000-0xD3FF)
        // CIA detection (0xDC00-0xDCFF for CIA1, 0xDD00-0xDDFF for CIA2)
        // etc.

        file << "\n";
    }

    /**
     * @brief Output zero page definitions to the assembly file
     *
     * Identifies zero page variables used by the code and generates
     * appropriate constant definitions.
     *
     * @param file Output stream
     */
    void DisassemblyWriter::emitZPDefines(std::ofstream& file) {
        // Collect all used zero page addresses
        std::set<u8> usedZP;
        for (u16 addr = 0x0000; addr <= 0x00FF; ++addr) {
            if (analyzer_.getMemoryType(addr) & MemoryType::Accessed) {
                usedZP.insert(static_cast<u8>(addr));
            }
        }

        std::set<u8> indexedZP;
        findIndexedZeroPageAccesses(indexedZP);

        // Merge the sets
        usedZP.insert(indexedZP.begin(), indexedZP.end());

        if (usedZP.empty()) {
            return;
        }

        // Convert to vector for sorting
        std::vector<u8> zpList(usedZP.begin(), usedZP.end());
        std::sort(zpList.begin(), zpList.end());

        // Calculate ZP base
        u8 zpBase = 0xFF - static_cast<u8>(zpList.size()) + 1;

        // Output ZP defines
        file << ".const ZP_BASE = $" << util::byteToHex(zpBase) << "\n";
        for (size_t i = 0; i < zpList.size(); ++i) {
            std::string varName = "ZP_" + std::to_string(i);
            file << ".const " << varName << " = ZP_BASE + " << i << " // $" << util::byteToHex(zpList[i]) << "\n";

            // Add to label generator
            const_cast<LabelGenerator&>(labelGenerator_).addZeroPageVar(zpList[i], varName);
        }

        file << "\n";
    }

    // Helper method to find indexed zero page accesses
    void DisassemblyWriter::findIndexedZeroPageAccesses(std::set<u8>& indexedZP) {
        const u16 sidStart = sid_.getLoadAddress();
        const u16 sidEnd = sidStart + sid_.getDataSize();

        // Scan through all code for indexed zero page instructions
        for (u16 pc = sidStart; pc < sidEnd; ) {
            if (!(analyzer_.getMemoryType(pc) & MemoryType::Code)) {
                ++pc;
                continue;
            }

            const u8 opcode = cpu_.getMemory()[pc];
            const auto mode = cpu_.getAddressingMode(opcode);
            const int size = cpu_.getInstructionSize(opcode);

            // Check for zero page indexed addressing modes
            if (mode == AddressingMode::ZeroPageX || mode == AddressingMode::ZeroPageY) {
                const u8 baseAddr = cpu_.getMemory()[pc + 1];

                // Get the range of indices used with this instruction
                const auto [minIndex, maxIndex] = cpu_.getIndexRange(pc);

                // Add all addresses in the range
                for (int i = minIndex; i <= maxIndex; ++i) {
                    u8 effectiveAddr = (baseAddr + i) & 0xFF; // Zero page wrapping
                    indexedZP.insert(effectiveAddr);
                }

                // If no index range recorded, assume at least the base address
                if (minIndex == 0 && maxIndex == 0) {
                    indexedZP.insert(baseAddr);
                }
            }

            if (mode == AddressingMode::AbsoluteY || mode == AddressingMode::AbsoluteX) {
                const u16 baseAddr = cpu_.getMemory()[pc + 1] | (cpu_.getMemory()[pc + 2] << 8);

                // Check if this absolute address is actually in zero page
                if (baseAddr <= 0xFF) {
                    const auto [minIndex, maxIndex] = cpu_.getIndexRange(pc);

                    // Add all addresses in the range
                    for (int i = minIndex; i <= maxIndex; ++i) {
                        u8 effectiveAddr = (baseAddr + i) & 0xFF; // Zero page wrapping
                        indexedZP.insert(effectiveAddr);
                    }
                }
            }

            pc += size;
        }
    }

    /**
     * @brief Disassemble to the output file
     *
     * Performs the actual disassembly writing to the file, handling code,
     * data, and labels appropriately.
     *
     * @param file Output stream
     */
    void DisassemblyWriter::disassembleToFile(std::ofstream& file, bool removeCIAWrites) {

        formatter_.setCIAWriteRemoval(removeCIAWrites);

        u16 pc = sid_.getLoadAddress();
        file << "\n* = SIDLoad\n\n";

         const u16 sidEnd = sid_.getLoadAddress() + sid_.getDataSize();

        while (pc < sidEnd) {
            // Check if we need to output a label
            const std::string label = labelGenerator_.getLabel(pc);
            if (!label.empty() && (analyzer_.getMemoryType(pc) & MemoryType::Code)) {
                file << label << ":\n";
            }

            // Check if this is code or data
            if (analyzer_.getMemoryType(pc) & MemoryType::Code) {
                const u16 startPc = pc;
                const std::string line = formatter_.formatInstruction(pc);

                file << util::padToColumn(line, 96);
                file << " //; $" << util::wordToHex(startPc) << " - "
                    << util::wordToHex(pc - 1) << "\n";
            }
            else if (analyzer_.getMemoryType(pc) & MemoryType::Data) {
                // Format data bytes
                formatter_.formatDataBytes(
                    file,
                    pc,
                    sid_.getOriginalMemory(),
                    sid_.getOriginalMemoryBase(),
                    sidEnd,
                    relocTable_.getAllEntries(),
                    analyzer_.getMemoryTypes());
            }
            else {
                // Unknown memory type, just increment PC
                ++pc;
            }
        }
    }

    void DisassemblyWriter::analyzeWritesForSelfModification() {
        // First pass: existing self-modification analysis
        for (const auto& write : allWrites_) {
            if (analyzer_.getMemoryType(write.addr) & MemoryType::Code) {
                u16 instrStart = analyzer_.findInstructionStartCovering(write.addr);
                if (instrStart != write.addr) {
                    int offset = write.addr - instrStart;

                    // Find or create a pattern for this specific modification
                    auto& patterns = selfModifyingPatterns_[instrStart];
                    SelfModifyingPattern* currentPattern = nullptr;

                    // Look for an existing incomplete pattern that we can add to
                    for (auto& pattern : patterns) {
                        // If we have a low byte but no high byte, and this is offset 2
                        if (pattern.hasLowByte && !pattern.hasHighByte && offset == 2) {
                            currentPattern = &pattern;
                            break;
                        }
                        // If we have a high byte but no low byte, and this is offset 1
                        else if (!pattern.hasLowByte && pattern.hasHighByte && offset == 1) {
                            currentPattern = &pattern;
                            break;
                        }
                        // If this pattern is already complete, skip it
                        else if (pattern.hasLowByte && pattern.hasHighByte) {
                            continue;
                        }
                    }

                    // If we didn't find a suitable pattern, create a new one
                    if (!currentPattern) {
                        patterns.push_back(SelfModifyingPattern{});
                        currentPattern = &patterns.back();
                    }

                    // Update the pattern based on register sources
                    bool foundInRegister = false;
                    for (const auto& [reg, flow] : registerSources_) {
                        if (flow.value == write.value) {
                            if (write.sourceInfo.type == RegisterSourceInfo::SourceType::Memory ||
                                flow.isIndexed) {
                                if (offset == 1) {
                                    currentPattern->lowByteSource = flow.sourceAddr;
                                    currentPattern->lowByte = write.value;
                                    currentPattern->hasLowByte = true;
                                }
                                else if (offset == 2) {
                                    currentPattern->highByteSource = flow.sourceAddr;
                                    currentPattern->highByte = write.value;
                                    currentPattern->hasHighByte = true;
                                }
                                foundInRegister = true;
                                break;
                            }
                        }
                    }

                    // Fallback to original source info if not found in registers
                    if (!foundInRegister && write.sourceInfo.type == RegisterSourceInfo::SourceType::Memory) {
                        if (offset == 1) {
                            currentPattern->lowByteSource = write.sourceInfo.address;
                            currentPattern->lowByte = write.value;
                            currentPattern->hasLowByte = true;
                        }
                        else if (offset == 2) {
                            currentPattern->highByteSource = write.sourceInfo.address;
                            currentPattern->highByte = write.value;
                            currentPattern->hasHighByte = true;
                        }
                    }

                    // Record this self-modification for pointer-based pattern detection
                    if (pointerDetector_) {
                        SelfModificationRecord record;
                        record.pc = 0; // We don't have the exact PC of the modifying instruction here
                        record.targetAddr = write.addr;
                        record.newValue = write.value;
                        record.sourceAddr = (write.sourceInfo.type == RegisterSourceInfo::SourceType::Memory) ?
                            write.sourceInfo.address : 0;
                        record.instrStart = instrStart;
                        record.offset = offset;

                        pointerDetector_->recordSelfModification(record);
                    }
                }
            }
        }

        // Count total patterns
        size_t totalPatterns = 0;
        for (const auto& [addr, patterns] : selfModifyingPatterns_) {
            totalPatterns += patterns.size();
        }

        // Analyze pointer-based patterns if detector is available
        if (pointerDetector_) {
            pointerDetector_->analyzePatterns();
        }
    }

} // namespace sidwinder