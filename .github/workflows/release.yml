name: Create Release

on:
  push:
    tags:
      - 'v*'  # Run when any tag starting with v is pushed

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            output_name: SIDwinder.exe
            artifact_name: sidwinder-windows
            zip_name: SIDwinder-windows.zip
          - os: ubuntu-latest
            output_name: SIDwinder
            artifact_name: sidwinder-linux
            zip_name: SIDwinder-linux.tar.gz
          - os: macos-latest
            output_name: SIDwinder
            artifact_name: sidwinder-macos
            zip_name: SIDwinder-macos.tar.gz

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake --formula

    - name: Configure CMake
      run: cmake -B build

    - name: Build
      run: cmake --build build --config Release

    - name: Test
      run: |
        cd build
        ctest --output-on-failure

    - name: Create artifact directory
      run: mkdir -p artifacts

    - name: Copy executable (Windows)
      if: matrix.os == 'windows-latest'
      run: cp build/Release/${{ matrix.output_name }} artifacts/

    - name: Copy executable (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: cp build/${{ matrix.output_name }} artifacts/

    # Copy dependency files - Fixed by specifying bash shell explicitly
    - name: Copy dependency files
      shell: bash  # Explicitly use bash shell for this step
      run: |
        mkdir -p artifacts/tools
        # Copy exomizer.exe (for Windows)
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          cp tools/exomizer.exe artifacts/tools/ || echo "exomizer.exe not found, skipping"
        fi
        # Copy KickAss.jar (for all platforms)
        cp tools/KickAss.jar artifacts/tools/ || echo "KickAss.jar not found, skipping"
        # Copy SIDwinder.cfg
        cp SIDwinder.cfg artifacts/ || echo "SIDwinder.cfg not found, skipping"

    # Optional: Copy any necessary resources
    - name: Copy resources
      shell: bash  # Also use bash here for consistency
      run: |
        mkdir -p artifacts/SIDPlayers
        cp -r SIDPlayers/* artifacts/SIDPlayers/ || echo "No SIDPlayers directory found, skipping"

    # Create a README if needed
    - name: Create README
      shell: bash  # Also use bash here for consistency
      run: |
        echo "# SIDwinder" > artifacts/README.md
        echo "" >> artifacts/README.md
        echo "Version: ${GITHUB_REF#refs/tags/}" >> artifacts/README.md
        echo "" >> artifacts/README.md
        echo "SIDwinder is a tool for converting and working with SID music files for the Commodore 64." >> artifacts/README.md
        echo "" >> artifacts/README.md
        echo "## Dependencies" >> artifacts/README.md
        echo "" >> artifacts/README.md
        echo "This package includes the necessary dependencies:" >> artifacts/README.md
        echo "- tools/exomizer.exe - Used for compressing PRG files" >> artifacts/README.md
        echo "- tools/KickAss.jar - The KickAss assembler used for compiling ASM files" >> artifacts/README.md
        echo "- SIDwinder.cfg - Configuration file" >> artifacts/README.md

    # Package artifacts
    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd artifacts
        7z a -tzip ../${{ matrix.zip_name }} *

    - name: Package artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd artifacts
        tar czf ../${{ matrix.zip_name }} *

    # Upload packaged artifacts for release
    - name: Upload artifacts for release
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-release
        path: ${{ matrix.zip_name }}
        retention-days: 1  # Only need to keep until the release job runs

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for creating releases
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*-release'
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: SIDwinder ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/*.zip
            artifacts/*.tar.gz