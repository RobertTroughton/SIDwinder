/**
 * TSCrunch Self-Extracting and Decompression Functions
 * JavaScript port by Claude
 * Original by Antonio Savona
 */

import { TERMINATOR, LZ2SIZE, RLEMASK, LZMASK, LITERALMASK, LZ2MASK } from './tokens.js';

// Boot loaders for different SFX modes
const boot = [
    0x01, 0x08, 0x0B, 0x08, 0x0A, 0x00, 0x9E, 0x32, 0x30, 0x36, 0x31, 0x00,
    0x00, 0x00, 0x78, 0xA2, 0xCC, 0xBD, 0x1A, 0x08, 0x95, 0x00, 0xCA, 0xD0,
    0xF8, 0x4C, 0x02, 0x00, 0x34, 0xBD, 0x00, 0x10, 0x9D, 0x00, 0xFF, 0xE8,
    0xD0, 0xF7, 0xC6, 0x07, 0xA9, 0x06, 0xC7, 0x04, 0x90, 0xEF, 0xA0, 0x00,
    0xB3, 0x24, 0x30, 0x29, 0xC9, 0x20, 0xB0, 0x47, 0xE6, 0x24, 0xD0, 0x02,
    0xE6, 0x25, 0xB9, 0xFF, 0xFF, 0x99, 0xFF, 0xFF, 0xC8, 0xCA, 0xD0, 0xF6,
    0x98, 0xAA, 0xA0, 0x00, 0x65, 0x27, 0x85, 0x27, 0xB0, 0x74, 0x8A, 0x65,
    0x24, 0x85, 0x24, 0x90, 0xD7, 0xE6, 0x25, 0xB0, 0xD3, 0x4B, 0x7F, 0x90,
    0x39, 0xF0, 0x68, 0xA2, 0x02, 0x85, 0x59, 0xC8, 0xB1, 0x24, 0xA4, 0x59,
    0x91, 0x27, 0x88, 0x91, 0x27, 0xD0, 0xFB, 0xA9, 0x00, 0xB0, 0xD5, 0xA9,
    0x37, 0x85, 0x01, 0x58, 0x4C, 0x61, 0x00, 0xF0, 0xF6, 0x09, 0x80, 0x65,
    0x27, 0x85, 0xA0, 0xA5, 0x28, 0xE9, 0x00, 0x85, 0xA1, 0xB1, 0xA0, 0x91,
    0x27, 0xC8, 0xB1, 0xA0, 0x91, 0x27, 0x98, 0xAA, 0xD0, 0xB0, 0x4A, 0x85,
    0xA5, 0xC8, 0xA5, 0x27, 0x90, 0x31, 0xF1, 0x24, 0x85, 0xA0, 0xA5, 0x28,
    0xE9, 0x00, 0x85, 0xA1, 0xA2, 0x02, 0xA0, 0x00, 0xB1, 0xA0, 0x91, 0x27,
    0xC8, 0xB1, 0xA0, 0x91, 0x27, 0xC8, 0xB9, 0xA0, 0x00, 0x91, 0x27, 0xC0,
    0x00, 0xD0, 0xF6, 0x98, 0xB0, 0x84, 0xE6, 0x28, 0x18, 0x90, 0x87, 0xA0,
    0xFF, 0x84, 0x59, 0xA2, 0x01, 0xD0, 0x99, 0x71, 0x24, 0x85, 0xA0, 0xC8,
    0xB3, 0x24, 0x09, 0x80, 0x65, 0x28, 0x85, 0xA1, 0xE0, 0x80, 0x26, 0xA5,
    0xA2, 0x03, 0xD0, 0xC6
];

const blankBoot = [
    0x01, 0x08, 0x0B, 0x08, 0x0A, 0x00, 0x9E, 0x32, 0x30, 0x36, 0x31, 0x00,
    0x00, 0x00, 0x78, 0xA9, 0x0B, 0x8D, 0x11, 0xD0, 0xA2, 0xCC, 0xBD, 0x1F,
    0x08, 0x95, 0x00, 0xCA, 0xD0, 0xF8, 0x4C, 0x02, 0x00, 0x34, 0xBD, 0x00,
    0x10, 0x9D, 0x00, 0xFF, 0xE8, 0xD0, 0xF7, 0xC6, 0x07, 0xA9, 0x06, 0xC7,
    0x04, 0x90, 0xEF, 0xA0, 0x00, 0xB3, 0x24, 0x30, 0x29, 0xC9, 0x20, 0xB0,
    0x47, 0xE6, 0x24, 0xD0, 0x02, 0xE6, 0x25, 0xB9, 0xFF, 0xFF, 0x99, 0xFF,
    0xFF, 0xC8, 0xCA, 0xD0, 0xF6, 0x98, 0xAA, 0xA0, 0x00, 0x65, 0x27, 0x85,
    0x27, 0xB0, 0x74, 0x8A, 0x65, 0x24, 0x85, 0x24, 0x90, 0xD7, 0xE6, 0x25,
    0xB0, 0xD3, 0x4B, 0x7F, 0x90, 0x39, 0xF0, 0x68, 0xA2, 0x02, 0x85, 0x59,
    0xC8, 0xB1, 0x24, 0xA4, 0x59, 0x91, 0x27, 0x88, 0x91, 0x27, 0xD0, 0xFB,
    0xA9, 0x00, 0xB0, 0xD5, 0xA9, 0x37, 0x85, 0x01, 0x58, 0x4C, 0x61, 0x00,
    0xF0, 0xF6, 0x09, 0x80, 0x65, 0x27, 0x85, 0xA0, 0xA5, 0x28, 0xE9, 0x00,
    0x85, 0xA1, 0xB1, 0xA0, 0x91, 0x27, 0xC8, 0xB1, 0xA0, 0x91, 0x27, 0x98,
    0xAA, 0xD0, 0xB0, 0x4A, 0x85, 0xA5, 0xC8, 0xA5, 0x27, 0x90, 0x31, 0xF1,
    0x24, 0x85, 0xA0, 0xA5, 0x28, 0xE9, 0x00, 0x85, 0xA1, 0xA2, 0x02, 0xA0,
    0x00, 0xB1, 0xA0, 0x91, 0x27, 0xC8, 0xB1, 0xA0, 0x91, 0x27, 0xC8, 0xB9,
    0xA0, 0x00, 0x91, 0x27, 0xC0, 0x00, 0xD0, 0xF6, 0x98, 0xB0, 0x84, 0xE6,
    0x28, 0x18, 0x90, 0x87, 0xA0, 0xFF, 0x84, 0x59, 0xA2, 0x01, 0xD0, 0x99,
    0x71, 0x24, 0x85, 0xA0, 0xC8, 0xB3, 0x24, 0x09, 0x80, 0x65, 0x28, 0x85,
    0xA1, 0xE0, 0x80, 0x26, 0xA5, 0xA2, 0x03, 0xD0, 0xC6
];

const boot2 = [
    0x01, 0x08, 0x0B, 0x08, 0x0A, 0x00, 0x9E, 0x32, 0x30, 0x36, 0x31, 0x00,
    0x00, 0x00, 0x78, 0xA9, 0x34, 0x85, 0x01, 0xA2, 0xD0, 0xBD, 0x1F, 0x08,
    0x9D, 0xFB, 0x00, 0xCA, 0xD0, 0xF7, 0x4C, 0x00, 0x01, 0xAA, 0xAA, 0xAA,
    0xAA, 0xBD, 0x00, 0x10, 0x9D, 0x00, 0xFF, 0xE8, 0xD0, 0xF7, 0xCE, 0x05,
    0x01, 0xA9, 0x06, 0xCF, 0x02, 0x01, 0x90, 0xED, 0xA0, 0x00, 0xB3, 0xFC,
    0x30, 0x27, 0xC9, 0x20, 0xB0, 0x45, 0xE6, 0xFC, 0xD0, 0x02, 0xE6, 0xFD,
    0xB1, 0xFC, 0x91, 0xFE, 0xC8, 0xCA, 0xD0, 0xF8, 0x98, 0xAA, 0xA0, 0x00,
    0x65, 0xFE, 0x85, 0xFE, 0xB0, 0x74, 0x8A, 0x65, 0xFC, 0x85, 0xFC, 0x90,
    0xD9, 0xE6, 0xFD, 0xB0, 0xD5, 0x4B, 0x7F, 0x90, 0x39, 0xF0, 0x68, 0xA2,
    0x02, 0x85, 0xF9, 0xC8, 0xB1, 0xFC, 0xA4, 0xF9, 0x91, 0xFE, 0x88, 0x91,
    0xFE, 0xD0, 0xFB, 0xA5, 0xF9, 0xB0, 0xD5, 0xA9, 0x37, 0x85, 0x01, 0x58,
    0x4C, 0x5F, 0x01, 0xF0, 0xF6, 0x09, 0x80, 0x65, 0xFE, 0x85, 0xFA, 0xA5,
    0xFF, 0xE9, 0x00, 0x85, 0xFB, 0xB1, 0xFA, 0x91, 0xFE, 0xC8, 0xB1, 0xFA,
    0x91, 0xFE, 0x98, 0xAA, 0xD0, 0xB0, 0x4A, 0x8D, 0xA3, 0x01, 0xC8, 0xA5,
    0xFE, 0x90, 0x30, 0xF1, 0xFC, 0x85, 0xFA, 0xA5, 0xFF, 0xE9, 0x00, 0x85,
    0xFB, 0xA2, 0x02, 0xA0, 0x00, 0xB1, 0xFA, 0x91, 0xFE, 0xC8, 0xB1, 0xFA,
    0x91, 0xFE, 0xC8, 0xB1, 0xFA, 0x91, 0xFE, 0xC0, 0x00, 0xD0, 0xF7, 0x98,
    0xB0, 0x84, 0xE6, 0xFF, 0x18, 0x90, 0x87, 0xA0, 0xAA, 0x84, 0xF9, 0xA2,
    0x01, 0xD0, 0x99, 0x71, 0xFC, 0x85, 0xFA, 0xC8, 0xB3, 0xFC, 0x09, 0x80,
    0x65, 0xFF, 0x85, 0xFB, 0xE0, 0x80, 0x2E, 0xA3, 0x01, 0xA2, 0x03, 0xD0,
    0xC6
];

/**
 * Decompression class
 */
class Decruncher {
    constructor(src = null, reverseliteral = false) {
        this.src = src;
        this.decrunched = [];
        this.reverseliteral = reverseliteral;
        if (src) {
            this.decrunch();
        }
    }
    
    /**
     * Decompress the source data
     * @param {Array|Buffer} src - Compressed data (optional, uses constructor src if not provided)
     */
    decrunch(src = null) {
        if (src !== null) {
            this.src = src;
        }
        if (!this.src) {
            this.decrunched = null;
            return;
        }
        
        this.decrunched = [];
        const optimalRun = this.src[0] + 1;
        let i = 1;
        
        while (this.src[i] !== TERMINATOR) {
            const code = this.src[i];
            
            // Literal token
            if ((code & 0x80) === LITERALMASK && (code & 0x7f) < 32) {
                const run = code & 0x1f;
                const chunk = Array.from(this.src.slice(i + 1, i + run + 1));
                if (this.reverseliteral) {
                    chunk.reverse();
                }
                this.decrunched = this.decrunched.concat(chunk);
                i += run + 1;
            }
            // LZ2 token
            else if ((code & 0x80) === LZ2MASK) {
                const run = LZ2SIZE;
                const offset = 127 - (code & 0x7f);
                const p = this.decrunched.length;
                for (let l = 0; l < run; l++) {
                    this.decrunched.push(this.decrunched[p - offset + l]);
                }
                i += 1;
            }
            // RLE token (non-zero)
            else if ((code & 0x81) === RLEMASK && (code & 0x7e) !== 0) {
                const run = ((code & 0x7f) >> 1) + 1;
                const byte = this.src[i + 1];
                for (let l = 0; l < run; l++) {
                    this.decrunched.push(byte);
                }
                i += 2;
            }
            // Zero run token
            else if ((code & 0x81) === RLEMASK && (code & 0x7e) === 0) {
                const run = optimalRun;
                for (let l = 0; l < run; l++) {
                    this.decrunched.push(0);
                }
                i += 1;
            }
            // LZ token
            else {
                let run, offset;
                if ((code & 2) === 2) {
                    // Short LZ
                    run = ((code & 0x7f) >> 2) + 1;
                    offset = this.src[i + 1];
                    i += 2;
                } else {
                    // Long LZ
                    const lookahead = this.src[i + 2];
                    run = 1 + (((code & 0x7f) >> 2) << 1) + ((lookahead & 128) === 128 ? 1 : 0);
                    offset = 32768 - (this.src[i + 1] + 256 * (lookahead & 0x7f));
                    i += 3;
                }
                const p = this.decrunched.length;
                for (let l = 0; l < run; l++) {
                    this.decrunched.push(this.decrunched[p - offset + l]);
                }
            }
        }
    }
}

/**
 * Create a self-extracting (SFX) executable
 * @param {Buffer} compressedData - The compressed data
 * @param {Object} options - SFX options
 * @param {number} options.jumpAddress - Address to jump to after decompression
 * @param {number} options.decrunchAddress - Address where data will be decompressed
 * @param {number} options.optimalRun - Optimal run length for zero runs
 * @param {number} options.sfxMode - SFX mode (0=normal, 1=stack-based)
 * @param {boolean} options.blank - Use blank screen boot loader
 * @returns {Buffer} Complete SFX executable
 */
function createSFX(compressedData, options) {
    const {
        jumpAddress,
        decrunchAddress,
        optimalRun,
        sfxMode = 0,
        blank = false
    } = options;
    
    let bootLoader;
    let gap = 0;
    
    if (sfxMode === 0) {
        bootLoader = blank ? [...blankBoot] : [...boot];
        if (blank) gap = 5;
        
        const fileLen = bootLoader.length + compressedData.length;
        const startAddress = 0x10000 - compressedData.length;
        const transfAddress = fileLen + 0x6ff;
        
        bootLoader[0x1e + gap] = transfAddress & 0xff;
        bootLoader[0x1f + gap] = transfAddress >> 8;
        
        bootLoader[0x3f + gap] = startAddress & 0xff;
        bootLoader[0x40 + gap] = startAddress >> 8;
        
        bootLoader[0x42 + gap] = decrunchAddress & 0xff;
        bootLoader[0x43 + gap] = decrunchAddress >> 8;
        
        bootLoader[0x7d + gap] = jumpAddress & 0xff;
        bootLoader[0x7e + gap] = jumpAddress >> 8;
        
        bootLoader[0xcc + gap] = optimalRun - 1;
    } else {
        bootLoader = [...boot2];
        const fileLen = bootLoader.length + compressedData.length;
        const startAddress = 0x10000 - compressedData.length;
        const transfAddress = fileLen + 0x6ff;
        
        bootLoader[0x26] = transfAddress & 0xff;
        bootLoader[0x27] = transfAddress >> 8;
        
        bootLoader[0x21] = startAddress & 0xff;
        bootLoader[0x22] = startAddress >> 8;
        
        bootLoader[0x23] = decrunchAddress & 0xff;
        bootLoader[0x24] = decrunchAddress >> 8;
        
        bootLoader[0x85] = jumpAddress & 0xff;
        bootLoader[0x86] = jumpAddress >> 8;
        
        bootLoader[0xd4] = optimalRun - 1;
    }
    
    return Buffer.from(bootLoader.concat(Array.from(compressedData)));
}

export {
    Decruncher,
    createSFX,
    boot,
    blankBoot,
    boot2
};